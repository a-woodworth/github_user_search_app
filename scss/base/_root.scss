@use '../abstracts' as *;

:root {
  @each $color, $shade-map in $active-theme {
    @each $shade, $value in $shade-map {
      --#{$color}-#{$shade}: #{$value};
    }
  }

  @if ($enable-media-query-dark-mode) {
    @media (prefers-color-scheme: dark) {
      @each $color, $shade-map in $dark {
        @each $shade, $value in $shade-map {
          --#{$color}-#{$shade}: #{$value};
        }
      }
    }
  }

  @each $screen-size, $size-map in $font-sizes {
    @if $screen-size == small {
      @each $size-name, $size-value in $size-map {
        --fs-#{$size-name}: #{$size-value};
      }
    } @else {
      @include mq($screen-size) {
        @each $size-name, $size-value in $size-map {
          --fs-#{$size-name}: #{$size-value};
        }
      }
    }
  }
}

body[data-theme='light'] {
  @each $color, $shade-map in $light {
    @each $shade, $value in $shade-map {
      --#{$color}-#{$shade}: #{$value};
    }
  }

  button[data-type='theme-toggle'] {
    color: $button-light-toggle-color;

    &:is(:hover, :focus) {
      color: $button-light-toggle-hover;
    }
  }

  .heading-1,
  .heading-2,
  .heading-3 span:last-child {
    color: $heading-color-bold-light-theme;
  }

  .card__body p,
  .card__footer p,
  .card__footer svg,
  .heading-3 span:first-child {
    color: $color-text-light-theme;
  }
}

body[data-theme='dark'] {
  @each $color, $shade-map in $dark {
    @each $shade, $value in $shade-map {
      --#{$color}-#{$shade}: #{$value};
    }
  }

  button[data-type='theme-toggle'] {
    color: $button-dark-toggle-color;

    &:is(:hover, :focus) {
      color: $button-dark-toggle-hover;
    }
  }

  .box-shadow-1 {
    box-shadow: none;
  }
}
